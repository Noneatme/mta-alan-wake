--[[	##########################################################################	##                                                                      ##	## Project: 'MTA Alan Wake' - Gamemode for Multi Theft Auto San Andreas ##	##                      Developer: Noneatme                             ##	##           License: See LICENSE in the top level directory            ##	##                                                                      ##	##########################################################################]]-- FUNCTIONS --aesx, aesy = 1600, 900addEvent("doElementActionStart", true)function getMiddleGuiPosition(lol, lol2)	local sWidth, sHeight = guiGetScreenSize()     local Width,Height = lol, lol2    local X = (sWidth/2) - (Width/2)    local Y = (sHeight/2) - (Height/2)		return X, Y, Width, Heightendlocal moov = 0local object1, object2local o_elementlocal useelement = falsefunction smoothMoveCamera ( x1, y1, z1, x1t, y1t, z1t, x2, y2, z2, x2t, y2t, z2t, time, useelement2, element)	if(moov == 1) then outputChatBox("Error: Du hast zu wenig Frames.", 0, 200, 0, false) return end	object1 = createObject ( 1337, x1, y1, z1 )	object2 = createObject ( 1337, x1t, y1t, z1t )	setElementAlpha ( object1, 0 )	setElementAlpha ( object2, 0 )	setObjectScale(object1, 0.01)	setObjectScale(object2, 0.01)	moveObject ( object1, time, x2, y2, z2, 0, 0, 0, "InOutQuad" )	moveObject ( object2, time, x2t, y2t, z2t, 0, 0, 0, "InOutQuad" )		addEventHandler ( "onClientPreRender", getRootElement(), camRender )	moov = 1	setTimer ( removeCamHandler, time, 1 )	setTimer ( destroyElement, time, 1, object1 )	setTimer ( destroyElement, time, 1, object2 )		useelement = useelement2	o_element = elementendlocal v_e_doing = {}function vanishElement(theElement)	if(v_e_doing[theElement] == true) then return end	v_e_doing[theElement] = true	for i = 1, 25 do		setTimer ( setElementAlpha, 100 * i, 1, theElement, 255 / 25 * ( 25 - i ) )	end	setTimer ( destroyElement, 2500, 1, theElement )endfunction removeCamHandler ()	if(moov == 1) then		moov = 0		removeEventHandler ( "onClientPreRender", getRootElement(), camRender )	endendfunction camRender ()	if(useelement == true) then		local x1, y1, z1 = getElementPosition ( object1 )		local x2, y2, z2 = getElementPosition ( o_element )		setCameraMatrix ( x1, y1, z1, x2, y2, z2 )	else		local x1, y1, z1 = getElementPosition ( object1 )		local x2, y2, z2 = getElementPosition ( object2 )		setCameraMatrix ( x1, y1, z1, x2, y2, z2 )	endendfunction sendInfoMessage(text, color)	local colour	if(color == "red") or (color == "Red") then colour = "#FF0000" end	if(color == "green") or (color == "Green") then colour = "#00FF00" end	if(color == "blue") or (color == "Blue") then colour = "#0000FF" end	if(color == "aqua") or (color == "Aqua") then colour = "#00FFFF" end	if(color == "yellow") or (color == "Yellow") then colour = "#FFFF00" end	if(color == "White") or (color == "white") then colour = "#FFFFFF" end	if(color == "black") or (color == "Black") then colour = "#000000" end	return outputChatBox("#FFFFFF[#00FF00INFO#FFFFFF] "..colour..text, 0, 0, 0, true)endfunction getPedName(thePed)	return getElementData(thePed, "ped:name")endfunction getMyMission()	return tonumber(getElementData(localPlayer, "mission"))endfunction setPedChat(thePed, time)	return setPedAnimation(thePed, "ped", "IDLE_chat", time, true, false, true)endfunction getOffsetFromXYZ( mat, vec )    -- make sure our matrix is setup correctly 'cos MTA used to set all of these to 1.    mat[1][4] = 0    mat[2][4] = 0    mat[3][4] = 0    mat[4][4] = 1    mat = matrix.invert( mat )    local offX = vec[1] * mat[1][1] + vec[2] * mat[2][1] + vec[3] * mat[3][1] + mat[4][1]    local offY = vec[1] * mat[1][2] + vec[2] * mat[2][2] + vec[3] * mat[3][2] + mat[4][2]    local offZ = vec[1] * mat[1][3] + vec[2] * mat[2][3] + vec[3] * mat[3][3] + mat[4][3]    return {offX, offY, offZ}endfunction getCameraRotation ()    local px, py, pz, lx, ly, lz = getCameraMatrix()    local rotz = 6.2831853071796 - math.atan2 ( ( lx - px ), ( ly - py ) ) % 6.2831853071796    local rotx = math.atan2 ( lz - pz, getDistanceBetweenPoints2D ( lx, ly, px, py ) )    --Convert to degrees    rotx = math.deg(rotx)    rotz = -math.deg(rotz)	    return rotx, 180, rotzendaddEventHandler("onClientPlayerVehicleExit", localPlayer, function(theVehicle)	setTimer(function() showCursor(false) end, 50, 1)end)function callServerFunction(funcname, ...)    local arg = { ... }    if (arg[1]) then        for key, value in next, arg do            if (type(value) == "number") then arg[key] = tostring(value) end        end    end    -- If the serverside event handler is not in the same resource, replace 'resourceRoot' with the appropriate element    triggerServerEvent("onClientCallsServerFunction", resourceRoot , funcname, unpack(arg))endfunction createAnimPed(id, x, y, z, rot, int, anim, block, frozen, inv, attached)	local p = createPed(id, x, y, z, rot)	setElementInterior(p, int)--	setElementDimension(p, getElementData(localPlayer, "id"))	if(attached == true) then		local ob = createObject(1337, x, y, z)		setElementInterior(ob, int)--		setElementDimension(ob, getElementData(localPlayer, "id"))	--	setElementCollisionsEnabled(ob, false)		setObjectScale(ob, 0)		setElementAlpha(ob, 0)		attachElements(p, ob)	end	if(anim) and (block) then		setPedAnimation(p, anim, block, -1, true, false, false)	end	setElementFrozen(p, frozen)	if(inv == true) then		addEventHandler("onClientPedDamage", p, cancelEvent)	end	return p;endfunction setInteractState()	return trueendrandomZiviSkins = {	12,	13,	22,	23,	37,	38,	41,	56,	59,	60,	67,	68,	93,	106,	122,	142,	147,	156,	161,	160,	168,	170,}function getMyID()	return tonumber(getElementData(localPlayer, "id"))end-- OBJECTS --addEventHandler("onClientResourceStart", getResourceRootElement(), function()	local txd = engineLoadTXD("data/misc/Flashlight.txd")	local dff = engineLoadDFF("data/misc/Flashlight.dff")		engineImportTXD(txd, 953)	engineReplaceModel(dff, 953)end)flashlight = createObject(953, 0, 0, 0)--setElementDimension(flashlight, getElementData(localPlayer, "id"))exports.bone_attach:attachElementToBone(flashlight, localPlayer, 11,0.05,0.015,0.1,0,-90,0)flashlight_lamp = createObject(1215, 0, 0, 0)--setElementDimension(flashlight_lamp, getElementData(localPlayer, "id"))flashlight_col = createColSphere(0, 0, 0, 1)attachElements(flashlight_col, flashlight_lamp)addEventHandler("onClientColShapeHit", flashlight_col, function(he)	if(getElementType(he) == "ped") and (getElementData(he, "ai:zombie") == true) then		setElementData(he, "zombie:licht", true, false)	endend)addEventHandler("onClientColShapeLeave", flashlight_col, function(he)	if(getElementType(he) == "ped") and (getElementData(he, "ai:zombie") == true) then		setElementData(he, "zombie:licht", false, false)	endend)setTimer(function()	for index, ped in pairs(getElementsByType("ped")) do		if(getElementAttachedTo(ped)) and (getElementDimension(getElementAttachedTo(ped)) ~= getElementDimension(localPlayer))  then			setElementDimension(getElementAttachedTo(ped), getElementDimension(localPlayer))			setElementDimension(ped, getElementDimension(localPlayer))		end	endend, 1000, -1)-- ACTION OBJECT --local action_m = {}local action_state = {}local action_data = {}function setActionObject(theObject, bool, reactivate, mission)	if(isElement(theObject)) then		if(bool == true) then			if(isElement(action_m[theObject])) then				return false;			end			if not(reactivate) then				reaactivate = false			end			if not(mission) then				mission = 0			end			local x, y, z = getElementPosition(theObject)			action_m[theObject] = createMarker(x, y, z, "corona", 0.5, 255, 0, 0, 200)			attachElements(action_m[theObject], theObject)			setElementInterior(action_m[theObject], getElementInterior(theObject))			if(getElementDimension(theObject) == 0) then				setElementToMap(action_m[theObject])			else				setElementDimension(action_m[theObject], getElementDimension(theObject))			end			setElementData(theObject, "triggerable", true, false)			action_state[theObject] = false			action_data[theObject] = {}			action_data[theObject]["reactivate"] = reactivate			action_data[theObject]["mission"] = mission		else			destroyElement(action_m[theObject])			setElementData(theObject, "triggerable", false, false)			action_state[theObject] = false			action_data[theObject] = {}			action_data[theObject]["reactivate"] = reactivate			action_data[theObject]["mission"] = mission		end	endendfunction isObjectActivated(theObject)	return action_state[theObject]endfunction setSoundPitch(sound, value)	local x, y, z, a = getSoundProperties(sound)	setSoundProperties(sound, x, y, value, a)endaddEventHandler("doElementActionStart", getLocalPlayer(), function(theElement)	if(isElement(action_m[theElement])) and (getElementData(theElement, "triggerable") == true) then		local mission = action_data[theElement]["mission"]		if(mission == 0) or (mission == getMyMission()) then			if(action_state[theElement] == false) then				action_state[theElement] = true				setMarkerColor(action_m[theElement], 0, 255, 0, 200)				local x, y, z = getElementPosition(theElement)				playSound3D("data/sounds/keypad.mp3", x, y, z, false)			else				if(action_data[theElement]["reactivate"] == true) then					action_state[theElement] = false					setMarkerColor(action_m[theElement], 255, 0, 0, 200)					local x, y, z = getElementPosition(theElement)					playSound3D("data/sounds/keypad.mp3", x, y, z, false)				end			end		end	endend)function isOpenworldMission()	return getElementData(localPlayer, "openworld")end